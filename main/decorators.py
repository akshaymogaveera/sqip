import logging
from functools import wraps
from typing import Any, Callable
from django.http import JsonResponse

from rest_framework import status
from rest_framework.exceptions import ParseError, ValidationError, NotFound
from main.exceptions import UnauthorizedAccessException, SerializerValidationError
from main.constants import INVALID_REQUEST
from django.core.paginator import EmptyPage

logger = logging.getLogger(__name__)


def view_set_error_handler(func: Callable) -> Callable:
    """
    Decorator function that wraps the original function/method to check to have reusable error handling and adds logging.
    Args:
        func (Callable): The function/method being decorated.
    Returns:
        Callable: The wrapped function/method or raises an error.
    """

    @wraps(func)
    def wrapper(*args, **kwargs) -> Any:
        """
        Wrapped function/method that centralizes error handling and logging.
        Args:
            *args: Positional arguments passed to the wrapped function/method.
            **kwargs: Keyword arguments passed to the wrapped function/method.
        Returns:
            JSONResponse: The response generated by the decorated function or an error response.
        """
        view_name = func.__qualname__
        logger.info(f"Executing view method: {view_name} with args: {args} and kwargs: {kwargs}")

        try:
            result = func(*args, **kwargs)
            logger.info(f"Successfully executed {view_name}. Result: {result}")
            return result
        except (UnauthorizedAccessException, ValidationError, EmptyPage, NotFound) as e:
            # Log the error message and let DRF handle the response as it would normally
            logger.error("Validation error occurred: %s", e.detail)
            # Reraise the exception to let DRF generate the response
            raise e  # This will return the exact same response generated by the serializer
        except ParseError as e:
            logger.error(f"[ParseError in {view_name}] {e}")
            return JsonResponse(
                {
                    "status": status.HTTP_400_BAD_REQUEST,
                    "error": {"code": INVALID_REQUEST, "message": "Malformed request body"},
                },
                status=status.HTTP_400_BAD_REQUEST,
            )
        except SerializerValidationError as e:
            logger.error(f"[SerializerValidationError in {view_name}] {e}")
            return _return_serializer_error_response(e)
        except Exception as e:
            logger.error(f"[General Exception in {view_name}] {str(e)}", exc_info=True)
            return JsonResponse(
                {
                    "error": {"message": "Something went wrong!"},
                },
                status=status.HTTP_400_BAD_REQUEST,
            )

    return wrapper


def _return_serializer_error_response(exception: SerializerValidationError) -> JsonResponse:
    """
    Return the appropriate response for serializer errors.

    Args:
        exception: SerializerValidationError object

    Returns:
        JsonResponse: JSON response containing the error message.
    """
    logger.error(f"[SerializerValidationException] {str(exception)}")
    return JsonResponse(
        {"status": status.HTTP_400_BAD_REQUEST, "error": exception.errors}, status=status.HTTP_400_BAD_REQUEST
    )